package me.clip.deluxetags;

import java.util.List;

import me.clip.deluxetags.commands.TagCommand;
import me.clip.deluxetags.config.ConfigWrapper;
import me.clip.deluxetags.gui.GUIHandler;
import me.clip.deluxetags.gui.GUIOptions;
import me.clip.deluxetags.gui.TagGUI;
import me.clip.deluxetags.listeners.ChatFormatListener;
import me.clip.deluxetags.listeners.ChatListener;
import me.clip.deluxetags.listeners.JoinListener;
import me.clip.deluxetags.listeners.PlayerListener;
import me.clip.deluxetags.updater.UpdateChecker;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitTask;

/**
 * DeluxeTags plugin
 * 
 * @author Ryan McCarthy
 */
public class DeluxeTags extends JavaPlugin {
	
	private TagConfig cfg;
	
	private ConfigWrapper messages;
	
	private ConfigWrapper playerFile;
	
	private GUIHandler guiHandler;
	
	private GUIOptions guiOptions;

	private DeluxeTag dummy;
	
	private BukkitTask cleanupTask = null;
	
	private UpdateChecker updater = null;
	
	private static boolean deluxeMode;
	
	private static boolean forceTags;
	
	private static boolean papi;
	
	@Override
	public void onEnable() {
		
		dummy = new DeluxeTag(420691337, "", "", "");
		
		cfg = new TagConfig(this);
		
		getCfg().loadDefConfig();
		
		deluxeMode = cfg.deluxeChat();
		
		forceTags = getCfg().forceTags();
		
		getLogger().info(getCfg().loadTags()+" tags loaded");

		playerFile = new ConfigWrapper(this, "userdata", "player_tags.yml");
		
		playerFile.createNewFile(null, "DeluxeTags player_tags.yml\nDo not edit this file!");	
		
		cleanupTask = Bukkit.getScheduler().runTaskTimerAsynchronously(this, new CleanupTask(this), 20L*300, 20L*300);
		
		guiOptions = new GUIOptions(this);
		
		guiHandler = new GUIHandler(this);
		
		Bukkit.getPluginManager().registerEvents(guiHandler, this);
		
		getCommand("tags").setExecutor(new TagCommand(this));
		
		Bukkit.getPluginManager().registerEvents(new PlayerListener(this), this);
		
		if (this.cfg.loadTagOnJoin()) {
			Bukkit.getPluginManager().registerEvents(new JoinListener(this), this);
		}
		
		messages = new ConfigWrapper(this, null, "messages.yml");

		messages.createNewFile("Loading DeluxeTags messages.yml",
				"DeluxeTags messages.yml\nEdit the plugin messages to your liking!");

		loadMessages();
		
		papi = Bukkit.getPluginManager().getPlugin("PlaceholderAPI") != null;
		
		if (deluxeMode) {
			
			getLogger().info("DeluxeChat will handle fetching placeholders for tags!");
			
		} else {
			
			if (cfg.formatChat()) {
				Bukkit.getPluginManager().registerEvents(new ChatFormatListener(this), this);
			}
			
			Bukkit.getPluginManager().registerEvents(new ChatListener(this), this);
			
			getLogger().info("You are not using DeluxeChat!");
			getLogger().info("DeluxeTags will listen to the AsyncPlayerChatEvent to provide compatibility for some chat plugins.");

		}
		
		if (getCfg().checkUpdates()) {
			
			updater = new UpdateChecker(this);
			
			updater.fetch();
		
			if (updater.hasUpdateAvailable()) {
			
				System.out.println("----------------------------");
				System.out.println("     DeluxeTags Updater");
				System.out.println(" ");
				System.out.println("An update for DeluxeChat has been found!");
				System.out.println("DeluxeTags " + updater.getSpigotVersion());
				System.out.println("You are running " + getDescription().getVersion());
				System.out.println(" ");
				System.out.println("Download at http://www.spigotmc.org/resources/deluxetags.4390/");
				System.out.println("----------------------------");
			
			} else {
			
				System.out.println("----------------------------");
				System.out.println("     DeluxeTags Updater");
				System.out.println(" ");
				System.out.println("You are running " + getDescription().getVersion());
				System.out.println("The latest version");
				System.out.println("of DeluxeTags!");
				System.out.println(" ");
				System.out.println("----------------------------");
			}				
		}
	}
	
	@Override
	public void onDisable() {
		
		if (cleanupTask != null) {
			
			cleanupTask.cancel();
			
			cleanupTask = null;	
		}
		
		DeluxeTag.unloadData();
		
		TagGUI.unload();
		
		guiOptions = null;
		
		dummy = null;
	}

	public DeluxeTag getDummy() {
		return dummy;
	}

	public TagConfig getCfg() {
		return cfg;
	}
	
	public GUIHandler getGUIHandler() {
		return guiHandler;
	}
	
	public UpdateChecker getUpdateChecker() {
		return updater;
	}
	
	public String getSavedTagIdentifier(String uuid) {
		FileConfiguration c = playerFile.getConfig();
		if (c.contains(uuid) && c.isString(uuid) && c.getString(uuid) != null) {
			return c.getString(uuid);
		}
		return null;
	}
	
	public void saveTagIdentifier(String uuid, String tagIdentifier) {
		FileConfiguration c = playerFile.getConfig();
		c.set(uuid, tagIdentifier);
		playerFile.saveConfig();
		return;
	}
	
	public void removeSavedTag(String uuid) {
		FileConfiguration c = playerFile.getConfig();
		if (c.contains(uuid)) {
			c.set(uuid, null);
			playerFile.saveConfig();
		}
		return;
	}
	
	public boolean removeSavedTags(List<String> uuids) {
		
		boolean s = false;
		
		FileConfiguration c = playerFile.getConfig();
		
		if (uuids != null && !uuids.isEmpty()) {
			
			for (String uuid : uuids) {
				
				if (c.contains(uuid)) {
					c.set(uuid, null);
					s = true;
				}
			}
			
			if (s) {
				playerFile.saveConfig(); 
			}
		}

		return s;
	}
	
	public ConfigWrapper getPlayerFile() {
		return playerFile;
	}
	
	public ConfigWrapper getLangFile() {
		return messages;
	}
	
	public void loadMessages() {
		
		Lang.setFile(messages.getConfig());

		for (final Lang value : Lang.values()) {
			messages.getConfig().addDefault(value.getPath(), value.getDefault());
		}

		messages.getConfig().options().copyDefaults(true);
		messages.saveConfig();
	}
	
	public static void msg(CommandSender s, String msg) {
		s.sendMessage(ChatColor.translateAlternateColorCodes('&', msg));
	}
	
	public boolean isDeluxeMode() {
		return deluxeMode;
	}

	public GUIOptions getGuiOptions() {
		if (guiOptions == null) {
			guiOptions = new GUIOptions(this);
		}
		return guiOptions;
	}
	
	public void reloadGUIOptions() {
		guiOptions = new GUIOptions(this);
	}
	
	public static boolean forceTags() {
		return forceTags;
	}
	
	public static void setForceTags(boolean b) {
		forceTags = b;
	}
	
	@SuppressWarnings("deprecation")
	public static String setPlaceholders(Player p, String s, DeluxeTag tag) {
		
		if (tag == null) {
			tag = DeluxeTag.getTag(p.getUniqueId().toString());
			if (tag == null) {
				tag = new DeluxeTag(1, "", "", "");
			}
		}

		String uuid = p.getUniqueId().toString();
		
		if (deluxeMode) {

			if (s.contains("%player%")) {
				s = s.replace("%player%", p.getName());
			}

			if (s.contains("%displayname%")) {
				s = s.replace("%displayname%", p.getDisplayName());
			}

			if (s.contains("%deluxetags_tag%")) {
				s = s.replace("%deluxetags_tag%", tag.getDisplayTag());
			}

			if (s.contains("%deluxetags_identifier%")) {

				String tagId = tag.getIdentifier();

				if (tagId == null) {
					tagId = "";
				}

				s = s.replace("%deluxetags_identifier%", tagId);
			}

			if (s.contains("%deluxetags_description%")) {

				String description = tag.getDescription();

				s = s.replace("%deluxetags_description%", description);
			}

			if (s.contains("%deluxetags_amount%")) {

				List<String> tmp = DeluxeTag.getAvailableTagIdentifiers(p);

				String amt = "0";

				if (tmp != null) {
					amt = String.valueOf(tmp.size());
				}

				s = s.replace("%deluxetags_amount%", amt);
			}
		} else {
			


			if (s.contains("{player}")) {
				s = s.replace("{player}", p.getName());
			}

			if (s.contains("{displayname}")) {
				s = s.replace("{displayname}", p.getDisplayName());
			}

			if (s.contains("{deluxetags_tag}")) {
				s = s.replace("{deluxetags_tag}", tag.getDisplayTag());
			}

			if (s.contains("{deluxetags_identifier}")) {

				String tagId = DeluxeTag.getPlayerTagIdentifier(uuid);

				if (tagId == null) {
					tagId = "";
				}

				s = s.replace("{deluxetags_identifier}", tagId);
			}

			if (s.contains("{deluxetags_description}")) {

				String description = DeluxeTag.getPlayerTagDescription(uuid);

				s = s.replace("{deluxetags_description}", description);
			}

			if (s.contains("{deluxetags_amount}")) {

				List<String> tmp = DeluxeTag.getAvailableTagIdentifiers(p);

				String amt = "0";

				if (tmp != null) {
					amt = String.valueOf(tmp.size());
				}

				s = s.replace("{deluxetags_amount}", amt);
			}	
		}
		
		if (papi) {
			s = me.clip.placeholderapi.PlaceholderAPI.setPlaceholders(p, s);
		}
		
		return ChatColor.translateAlternateColorCodes('&', s);
	}
	
	public static boolean papi() {
		return papi;
	}
}
